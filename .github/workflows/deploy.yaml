name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Create .env file
      run: |
        echo "APP_NAME=${{ secrets.APP_NAME }}" >> .env
        echo "APP_ENV=${{ secrets.APP_ENV }}" >> .env
        echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
        echo "APP_DEBUG=${{ secrets.APP_DEBUG }}" >> .env
        echo "APP_URL=${{ secrets.APP_URL }}" >> .env

        echo "LOG_CHANNEL=${{ secrets.LOG_CHANNEL }}" >> .env
        echo "LOG_DEPRECATIONS_CHANNEL=${{ secrets.LOG_DEPRECATIONS_CHANNEL }}" >> .env
        echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env

        echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
        echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

        echo "BROADCAST_DRIVER=${{ secrets.BROADCAST_DRIVER }}" >> .env
        echo "CACHE_DRIVER=${{ secrets.CACHE_DRIVER }}" >> .env
        echo "FILESYSTEM_DISK=${{ secrets.FILESYSTEM_DISK }}" >> .env
        echo "QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION }}" >> .env
        echo "SESSION_DRIVER=${{ secrets.SESSION_DRIVER }}" >> .env
        echo "SESSION_LIFETIME=${{ secrets.SESSION_LIFETIME }}" >> .env

        echo "MEMCACHED_HOST=${{ secrets.MEMCACHED_HOST }}" >> .env

        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
        echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env

        echo "MAIL_MAILER=${{ secrets.MAIL_MAILER }}" >> .env
        echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
        echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
        echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
        echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
        echo "MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}" >> .env
        echo "MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}" >> .env
        echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> .env

        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
        echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> .env
        echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> .env
        echo "AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}" >> .env
        echo "AWS_URL=${{ secrets.AWS_URL }}" >> .env

        echo "PUSHER_APP_ID=${{ secrets.PUSHER_APP_ID }}" >> .env
        echo "PUSHER_APP_KEY=${{ secrets.PUSHER_APP_KEY }}" >> .env
        echo "PUSHER_APP_SECRET=${{ secrets.PUSHER_APP_SECRET }}" >> .env
        echo "PUSHER_HOST=${{ secrets.PUSHER_HOST }}" >> .env
        echo "PUSHER_PORT=${{ secrets.PUSHER_PORT }}" >> .env
        echo "PUSHER_SCHEME=${{ secrets.PUSHER_SCHEME }}" >> .env
        echo "PUSHER_APP_CLUSTER=${{ secrets.PUSHER_APP_CLUSTER }}" >> .env

        echo "VITE_APP_NAME=${{ secrets.VITE_APP_NAME }}" >> .env
        echo "VITE_PUSHER_APP_KEY=${{ secrets.VITE_PUSHER_APP_KEY }}" >> .env
        echo "VITE_PUSHER_HOST=${{ secrets.VITE_PUSHER_HOST }}" >> .env
        echo "VITE_PUSHER_PORT=${{ secrets.VITE_PUSHER_PORT }}" >> .env
        echo "VITE_PUSHER_SCHEME=${{ secrets.VITE_PUSHER_SCHEME }}" >> .env
        echo "VITE_PUSHER_APP_CLUSTER=${{ secrets.VITE_PUSHER_APP_CLUSTER }}" >> .env

        echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
        echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
        echo "GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}" >> .env

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./.platform/docker
        file: dockerfile.production
        push: true
        tags: thiagosvalentim/eideasy-test:latest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Update ECS service with new image
      env:
        AWS_REGION: eu-central-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CLUSTER_NAME: eideasy-cluster
        SERVICE_NAME: eideasy-service
        CONTAINER_NAME: app
        IMAGE_NAME: thiagosvalentim/eideasy-test:latest
      run: |
        # Get the current task definition JSON
        TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition $SERVICE_NAME)

        # Extract the container definition JSON
        CONTAINER_DEFINITIONS=$(echo $TASK_DEFINITION_JSON | jq --arg IMAGE_NAME "$IMAGE_NAME" '.taskDefinition | .containerDefinitions[0].image=$IMAGE_NAME')

        # Register a new task definition
        NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
          --family $(echo $TASK_DEFINITION_JSON | jq -r .taskDefinition.family) \
          --execution-role-arn $(echo $TASK_DEFINITION_JSON | jq -r .taskDefinition.executionRoleArn) \
          --network-mode $(echo $TASK_DEFINITION_JSON | jq -r .taskDefinition.networkMode) \
          --container-definitions "$CONTAINER_DEFINITIONS" \
          --requires-compatibilities $(echo $TASK_DEFINITION_JSON | jq -r .taskDefinition.requiresCompatibilities) \
          --cpu $(echo $TASK_DEFINITION_JSON | jq -r .taskDefinition.cpu) \
          --memory $(echo $TASK_DEFINITION_JSON | jq -r .taskDefinition.memory))

        # Update the ECS service to use the new task definition
        NEW_TASK_DEFINITION_ARN=$(echo $NEW_TASK_DEFINITION | jq -r .taskDefinition.taskDefinitionArn)
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEFINITION_ARN --force-new-deployment
